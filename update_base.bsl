#Использовать logos
#Использовать cmdline
#Использовать 1commands
#Использовать fs
#Использовать configor


Перем Лог;
Перем мПутьФайлНастроек;
Перем мНастройки;


Процедура Инициализация()

	Лог.Информация("Начинаем обновлять базу ЮРАЙТ");

	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	Парсер.ДобавитьИменованныйПараметр("--FILE_ENV");
	Парсер.ДобавитьИменованныйПараметр("--DEBUG");

	Параметры = Парсер.Разобрать(АргументыКоманднойСтроки);
	мПутьФайлНастроек = Параметры["--FILE_ENV"];
	РежимОтладки = Параметры["--DEBUG"] = "true";
	
	УстановитьРежимОтладкиПриНеобходимости(РежимОтладки);

	Если мПутьФайлНастроек = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(мПутьФайлНастроек) Тогда
		Лог.Ошибка("Путь к файлам настроек не заполнен");
		Лог.Информация("Обновление ЮРАЙТ завершено");
		Возврат;
	КонецЕсли;

	Лог.Отладка("Используем файл настроек: %1", мПутьФайлНастроек);

	ФайлНастроекСуществует = ПроверитьНаличиеФайла(мПутьФайлНастроек);

	Если ФайлНастроекСуществует = Ложь Тогда
		Лог.Ошибка("Файл %1 не существет или недоступен", мПутьФайлНастроек);
		Лог.Информация("Обновление ЮРАЙТ завершено");
		Возврат;		
	КонецЕсли;

	Менеджер = ИнициироватьЧтениеНастроек(мПутьФайлНастроек);

	ЗаполнитьНастройкиПриложения(Менеджер);

	ВыполнитьШагиСкрипта();

	Лог.Информация("Обновление ЮРАЙТ завершено");
	
КонецПроцедуры

Процедура ВыполнитьШагиСкрипта()
	
	Если мНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Успех = Истина;

	// 1.Сбросим все сеансы по базе
	ОбработатьСеансы(Успех, "kill");

	// 2. Установим блокировку новых сеансов
	ОбработатьСеансы(Успех, "lock");

	// 3. Загрузим конфигурацию из хранилища
	ЗагрузитьКонфигурациюИзХранилища(Успех);

	// 4. Обновим конфигурацию базы данных
	ОбновитьКонфигурациюБазыДанных(Успех);

	// 5. Запустим обработчики обновления данных
	ЗапуститьКлиентКонфигурации(Успех);

	// 6. Приостановим выполнение скрипта на 2 минуту для выполнения обновления
	Приостановить(120000);

	// 7. Завершим процессы 1С, которые запустили для обновления
	ЗавершитьПроцессыКлиента1С(Успех);

	// 8. Снимем блокировку для новых сеансов
	ОбработатьСеансы(Успех, "unlock");

КонецПроцедуры

Процедура ЗавершитьПроцессыКлиента1С(Успех)

	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Закрываю клиент 1С после обновления");

	МассивПроцессов = НайтиПроцессыПоИмени("1cv8");

	Для каждого Процесс Из МассивПроцессов Цикл
		Попытка
			Процесс.Завершить();
			Лог.Отладка("Завершили процесс %1", Процесс.Идентификатор);
		Исключение
			Лог.Ошибка("Не удалось завершить процесс %1", Процесс.Идентификатор);
			Успех = Ложь;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура ЗапуститьКлиентКонфигурации(Успех)

	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Лог.Информация("Запускаю клиент 1С с параметром ЗапуститьОбновлениеИнформационнойБазы");

	// deployka run  
	// /Smsk-s3-vs-app06\pb_urait  
	// -db-user Администратор 
	// -db-pwd 123456 
	// -v8version 8.3.15 
	// -uccode 1234
	// -command ЗапуститьОбновлениеИнформационнойБазы 	

	СтрокаЗапуска = "deployka run /S" + мНастройки.БАЗА_Сервер 
					+ "\" + мНастройки.БАЗА_База 
					+ " -db-user " + мНастройки.БАЗА_Пользователь
					+ " -db-pwd " + мНастройки.БАЗА_Пароль
					+ " -v8version " + мНастройки.КЛАС_Версия
					+ " -uccode " + мНастройки.КЛАС_Код
					+ " -command " + ОбернутьВКавычки("ЗапуститьОбновлениеИнформационнойБазы");

	ВыполнитьКоманду(СтрокаЗапуска, Успех);

КонецПроцедуры

Процедура ОбновитьКонфигурациюБазыДанных(Успех)

	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Лог.Информация("Обновляю конфигурацию БД");

	// deployka dbupdate 
	// /Smsk-s3-vs-app06\pb_urait  
	// -db-user Администратор 
	// -db-pwd 123456 
	// -v8version 8.3.15 
	// -uccode 1234	

	СтрокаЗапуска = "deployka dbupdate /S" + мНастройки.БАЗА_Сервер 
					+ "\" + мНастройки.БАЗА_База 
					+ " -db-user " + мНастройки.БАЗА_Пользователь
					+ " -db-pwd " + мНастройки.БАЗА_Пароль
					+ " -v8version " + мНастройки.КЛАС_Версия
					+ " -uccode " + мНастройки.КЛАС_Код;

	ВыполнитьКоманду(СтрокаЗапуска, Успех);

КонецПроцедуры

Процедура ОбработатьСеансы(Успех, Действие)

	Если НЕ Действие = "unlock" Тогда
		Если НЕ Успех = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Лог.Информация("Обрабатываю сеансы базы. Передано действие %1. Исполняю.", Действие);

	// deployka session kill
	// -ras intelis-ms
	// -rac "C:\Program Files\1cv8\8.3.15.1830\bin\rac.exe"
	// -db pb_urait
	// -db-user Администратор 
	// -db-pwd 123456 
	// -cluster-port 1545
	// -cluster-admin Admin
	// -cluster-pwd 123456  
	// -lockmessage "Выполняется обновление"
	// -v8version 8.3.15 
	// -lockuccode 1234	

	СтрокаЗапуска = "deployka session " + Действие 
					+ " -ras " + мНастройки.БАЗА_Сервер
					+ " -rac " + ОбернутьВКавычки(мНастройки.КЛАС_Путь)
					+ " -db " + мНастройки.БАЗА_База 
					+ " -db-user " + мНастройки.БАЗА_Пользователь
					+ " -db-pwd " + мНастройки.БАЗА_Пароль;
	
	Если ЗначениеЗаполнено(мНастройки.КЛАС_Пользователь) Тогда
		СтрокаЗапуска = СтрокаЗапуска 
					+ " -cluster-admin " + мНастройки.КЛАС_Пользователь;
	КонецЕсли;

	Если ЗначениеЗаполнено(мНастройки.КЛАС_Пароль) Тогда
		СтрокаЗапуска = СтрокаЗапуска 
					+ " -cluster-pwd " + мНастройки.КЛАС_Пароль;
	КонецЕсли;
	
	СтрокаЗапуска = СтрокаЗапуска 
					+ " -lockuccode " + мНастройки.КЛАС_Код
					+ " -lockmessage " + ОбернутьВКавычки(мНастройки.КЛАС_Сообщение)
					+ " -v8version " + мНастройки.КЛАС_Версия;

	ВыполнитьКоманду(СтрокаЗапуска, Успех);	
	
КонецПроцедуры

Процедура ЗагрузитьКонфигурациюИзХранилища(Успех)
	Если НЕ Успех = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Лог.Информация("Загружаю конфигурацию из хранилища");

	// deployka loadrepo 
	// /Smsk-s3-vs-app06\pb_urait 
	// tcp://msk-s3-vs-1cstr/youright_prod 
	// -db-user Администратор 
	// -db-pwd 123456 
	// -storage-user Admin 
	// -storage-pwd 123456
	// -v8version 8.3.15 
	// -uccode 1234	

	СтрокаЗапуска = "deployka loadrepo /S" + мНастройки.БАЗА_Сервер 
					+ "\" + мНастройки.БАЗА_База 
					+ " " + мНастройки.ХРАН_Путь
					+ " -db-user " + мНастройки.БАЗА_Пользователь
					+ " -db-pwd " + мНастройки.БАЗА_Пароль
					+ " -storage-user " + мНастройки.ХРАН_Пользователь
					+ " -storage-pwd " + мНастройки.ХРАН_Пароль
					+ " -v8version " + мНастройки.КЛАС_Версия
					+ " -uccode " + мНастройки.КЛАС_Код;

	ВыполнитьКоманду(СтрокаЗапуска, Успех);
	
КонецПроцедуры

Процедура ВыполнитьКоманду(СтрокаЗапуска, Успех)
	
	Команда = Новый Команда;	
	Команда.УстановитьСтрокуЗапуска(СтрокаЗапуска);

	Лог.Отладка("Исполняю команду %1", СтрокаЗапуска);

	КодВозврата = Команда.Исполнить();

	Если НЕ КодВозврата = 0 Тогда
		Успех = Ложь;
		Лог.Ошибка(Команда.ПолучитьВывод());
		Возврат;
	КонецЕсли;

	Лог.Отладка(Команда.ПолучитьВывод());

КонецПроцедуры

Функция ОбернутьВКавычки(Знач Строка);
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьНастройкиПриложения(Знач Менеджер)
	
	Если Менеджер = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Начинаю заполнение внутреннего хранилища параметров");

	ПеремНастройки = Новый Структура;	
	НастройкиПолны = Истина;

	// Путь хранилища релиза
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"ХРАН_Путь", 
									"Настройки.ПараметрыХранилища.Путь",
									НастройкиПолны);
	// Пользователь хранилища
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"ХРАН_Пользователь", 
									"Настройки.ПараметрыХранилища.Пользователь",
									НастройкиПолны);
	// Пароль хранилища
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"ХРАН_Пароль", 
									"Настройки.ПараметрыХранилища.Пароль",
									НастройкиПолны);
	// Сервер 1С
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"БАЗА_Сервер", 
									"Настройки.ПараметрыБазы.Сервер",
									НастройкиПолны);
	// База 1С
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"БАЗА_База", 
									"Настройки.ПараметрыБазы.База",
									НастройкиПолны);
	// Пользователь базы
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"БАЗА_Пользователь", 
									"Настройки.ПараметрыБазы.Пользователь",
									НастройкиПолны);
	// Пароль базы
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"БАЗА_Пароль", 
									"Настройки.ПараметрыБазы.Пароль",
									НастройкиПолны);
	
	// Путь утилиты администрирования RAC
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"КЛАС_Путь", 
									"Настройки.ПараметрыКласстера.ПутьУтилитыАдминистрирования",
									НастройкиПолны);
	// Пользователь класстера
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"КЛАС_Пользователь", 
									"Настройки.ПараметрыКласстера.Пользователь",
									НастройкиПолны,
									Ложь);
	// Пароль класстера
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"КЛАС_Пароль", 
									"Настройки.ПараметрыКласстера.Пароль",
									НастройкиПолны,
									Ложь);
	// Код разрешения
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"КЛАС_Код", 
									"Настройки.ПараметрыКласстера.КодРазрешения",
									НастройкиПолны);					

	// Сообщение блокировки
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"КЛАС_Сообщение", 
									"Настройки.ПараметрыКласстера.СообщениеБлокировки",
									НастройкиПолны);
	
	// Версия
	ПоместитьНастройкуВОбщееХранилище(Менеджер, 
									ПеремНастройки, 
									"КЛАС_Версия", 
									"Настройки.ПараметрыКласстера.Версия",
									НастройкиПолны);
	
	Если НастройкиПолны Тогда
		мНастройки = ПеремНастройки;
	КонецЕсли;

	Лог.Отладка("Заполнение внутреннего хранилища параметров закончено");

КонецПроцедуры

Процедура ПоместитьНастройкуВОбщееХранилище(Знач Менеджер, 
											ПеремНастройки, 
											ИмяНастройки, 
											ИмяВФайле, 
											ЗначениеУказано, 
											ОбязательныйПараметр = Истина)

	ПеремПараметр = Менеджер.Параметр(ИмяВФайле);
	ПеремНастройки.Вставить(ИмяНастройки, ПеремПараметр);
	Если НЕ ЗначениеЗаполнено(ПеремПараметр) Тогда
		Если ОбязательныйПараметр = Истина Тогда
			Лог.Ошибка("Не удалось прочитать параметр %1 (в файле %2)", ИмяНастройки, ИмяВФайле);
			ЗначениеУказано = Ложь;
		Иначе
			Лог.Отладка("Прочитал параметр %1 (в файле %2) как %3", ИмяНастройки, ИмяВФайле, ПеремПараметр);		
		КонецЕсли;
	Иначе
		Лог.Отладка("Прочитал параметр %1 (в файле %2) как %3", ИмяНастройки, ИмяВФайле, ПеремПараметр);
	КонецЕсли;

КонецПроцедуры

Функция ИнициироватьЧтениеНастроек(Знач ПутьКНастройкам)

	Лог.Отладка("Начинаю чтение настроек из файла %1", ПутьКНастройкам);

	МенеджерПараметров = Новый МенеджерПараметров();
	МенеджерПараметров.УстановитьФайлПараметров(ПутьКНастройкам);
	МенеджерПараметров.ИспользоватьПровайдерJSON(0);

	Попытка
		МенеджерПараметров.Прочитать();
	Исключение
		Лог.Ошибка("Не удалось прочитать настройки из файла %1 по причине: %2", ПутьКНастройкам, ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ МенеджерПараметров.ЧтениеВыполнено() Тогда
		Лог.Ошибка("Не удалось прочитать настройки из файла %1 по причине: Нарушение формата файла", ПутьКНастройкам);
		Возврат Неопределено;
	КонецЕсли;

	Лог.Отладка("Прочитал настройки из файла %1", ПутьКНастройкам);
	Возврат МенеджерПараметров;
	
КонецФункции

Функция ПроверитьНаличиеФайла(Знач ИмяФайла)

	Лог.Отладка("Проверяем наличие файла: %1", ИмяФайла);
	Возврат ФС.ФайлСуществует(ИмяФайла);

КонецФункции

Процедура УстановитьРежимОтладкиПриНеобходимости(Знач РежимОтладки) Экспорт
	
	Если РежимОтладки Тогда		
		Лог().УстановитьУровень(УровниЛога.Отладка);
	КонецЕсли;
	
КонецПроцедуры 

Функция Лог()
	Возврат Логирование.ПолучитьЛог(ИмяЛога());
КонецФункции

Функция ИмяЛога()
	Возврат "oscript.app.autoupdate_urait";	
КонецФункции

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт
	Возврат СтрШаблон("[%1]-[%2]:[%3]-%4", 
			ИмяЛога(),	
			ТекущаяДата(),  
			УровниЛога.НаименованиеУровня(Уровень), 
			Сообщение);
КонецФункции



Лог = Лог();
Лог.УстановитьРаскладку(ЭтотОбъект);

мНастройки = Неопределено;

Инициализация();